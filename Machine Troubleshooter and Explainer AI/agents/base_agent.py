# agents/base_agent.py
import logging
from typing import List, Tuple, TypedDict, Literal, Optional # Added for AgentState
from langchain_core.messages import BaseMessage, HumanMessage, AIMessage # Added for AgentState

class Agent:
    # ANSI escape codes for foreground colors
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    RESET = '\033[0m'

    BG_BLACK = '\033[40m' # Optional background

    def __init__(self, name:str, color: str = WHITE):
        self.name = name
        self.color = color
        self.logger = logging.getLogger(self.name)
        # It's better to configure logging handlers once, usually in a main app.py or logging_config.py
        # For simple debugging, you can ensure a handler exists:
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO) # Set a default level

    def _format_message(self, message:str) -> str:
        color_code = self.BG_BLACK + self.color if self.BG_BLACK else self.color
        return f"{color_code}[{self.name}] {message} {self.RESET}"
    
    # --- FIX: Add **kwargs to allow passing exc_info ---
    def debug(self, message, **kwargs):
        self.logger.debug(self._format_message(message), **kwargs) 
        
    def info(self, message, **kwargs):
        self.logger.info(self._format_message(message), **kwargs)

    def warning(self, message, **kwargs):
        self.logger.warning(self._format_message(message), **kwargs)
        
    def error(self, message, **kwargs):
        self.logger.error(self._format_message(message), **kwargs)
        
    def critical(self, message, **kwargs):
        self.logger.critical(self._format_message(message), **kwargs)

# --- LangGraph Agent State Definition ---
# Moved here for single source of truth
class AgentState(TypedDict):
    """
    Represents the state of our LangGraph agent workflow.
    This state is passed between nodes and updated during execution.
    """
    messages: List[BaseMessage] # A list of messages making up the conversation history
    user_query: str # The original query from the user (can be extracted from messages)
    plan: List[str] # The step-by-step plan generated by the planner
    next_step_index: int # Index of the next step in the plan to execute
    tool_output: str # Output from the last tool execution (RAG or Web Search)
    final_answer_content: Optional[str] # Make it Optional
    decision: Optional[str]